<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Flask on 李林克斯 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://deanthompson.github.io/tags/flask/</link>
    <language>zh-CN</language>
    <author>Yangliang Li</author>
    
    <updated>Thu, 05 Nov 2015 16:52:12 CST</updated>
    
    <item>
      <title>Tornado 和 Flask 应用缓存响应结果</title>
      <link>http://deanthompson.github.io/posts/2015/11/cache-response-in-tornado-and-flask</link>
      <pubDate>Thu, 05 Nov 2015 16:52:12 CST</pubDate>
      <author>Yangliang Li</author>
      <guid>http://deanthompson.github.io/posts/2015/11/cache-response-in-tornado-and-flask</guid>
      <description>

&lt;p&gt;写 API 的时候，总是会想着如何能提升性能。在一般的 Web 应用里，基本上没什么 CPU 密集型的计算，大部分时间还是消耗在 IO 上面：查询数据库、读写文件、调用第三方 API 等。有些可以异步的操作，比如发送注册邮件、手机验证码等，可以用任务队列来处理。在 Python 的生态里，Celery 就是一个很成熟的解决方案。但是对于很多查询请求，还是需要同步返回的。&lt;/p&gt;

&lt;p&gt;如果真的遇到性能问题，正确的做法是先找出性能瓶颈，然后对症下药。比如优化数据库索引、优化数据库查询语句、优化算法和数据结构，加速查询和计算。但是最快的计算就是不算——或只计算一次，也就是把计算（查询）的结果缓存起来，以后相同条件的计算（查询）直接从缓存里获取，而不需要重新计算（查询）。&lt;/p&gt;

&lt;p&gt;对于耗时的计算，缓存是一种非常有效的优化手段。但缓存也不是万能的，引入缓存的同时，一些其他问题或需要注意的事情也随之而来，比如数据同步、缓存失效、命中率、分布式等。这里不深入探讨这些问题，仅针对下面这种场景，使用缓存来优化 API 性能：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET 查询&lt;/li&gt;
&lt;li&gt;查询很耗时&lt;/li&gt;
&lt;li&gt;相同条件、不同时间（或某段时间内）的查询结果是一致的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如获取静态页面（也可以通过 Nginx 直接返回），查询某些元数据列表（如国家列表、产品分类等）。&lt;/p&gt;

&lt;h2 id=&#34;基本思想:a2bd452655e299f799e36f1a03619c2b&#34;&gt;基本思想&lt;/h2&gt;

&lt;p&gt;“一码胜千言”，直接上代码描述一下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def cachable_get(kwargs, on_cache_missing, timeout=300):
    key = make_key(kwargs)	# 计算出一个 key
    value = cache.get(key)	# 查询缓存
    if not value:
        value = on_cache_missing(kwargs)	# 缓存没有命中，计算一次
        cache.set(key, value, timeout)	# 把计算结果写入缓存
    return value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上也就是：先查缓存，如果有缓存没命中，再计算并把结果写入缓存。这种机制类似于中间件，或 Python 里的装饰器。&lt;/p&gt;

&lt;h2 id=&#34;tornado-的实现:a2bd452655e299f799e36f1a03619c2b&#34;&gt;Tornado 的实现&lt;/h2&gt;

&lt;p&gt;Tornado 的 &lt;code&gt;tornado.web.RequestHandler&lt;/code&gt; 有两个方法：&lt;code&gt;prepare&lt;/code&gt; 和 &lt;code&gt;write&lt;/code&gt;。前者会在执行业务代码前执行，后者用于写入响应结果。所以可以在 &lt;code&gt;prepare&lt;/code&gt; 里查询缓存，如果命中就直接返回。没有命中的请求会执行业务代码，然后在 &lt;code&gt;write&lt;/code&gt; 里顺便写入缓存。&lt;/p&gt;

&lt;p&gt;在 Tornado 项目里，通常的做法是从 &lt;code&gt;tornado.web.RequestHandler&lt;/code&gt; 派生一个 &lt;code&gt;BaseHandler&lt;/code&gt; 用于项目内 Handler 的统一基类，方便在 &lt;code&gt;BaseHandler&lt;/code&gt; 里做一些统一的处理。如果在 &lt;code&gt;BaseHandler&lt;/code&gt; 的 &lt;code&gt;prepare&lt;/code&gt; 和 &lt;code&gt;write&lt;/code&gt; 方法实现缓存机制，会影响到所有子类的表现，这样可控性和扩展性就会差一点。推荐的做法是用 Mixin.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-

try:
    import cPickle as pickle
except ImportError:
    import pickle

import functools
from hashlib import sha1


class CacheMixin(object):
    @property
    def cache(self):
        return self.application.cache

    def _generate_key(self):
        key = pickle.dumps((self.request.path, self.request.arguments))
        return self._with_prefix(sha1(key).hexdigest())

    def _with_prefix(self, key):
        return &#39;%s:%s&#39; % (self.request.path.strip(&#39;/&#39;), key)

    def write_cache(self, chunk):
        super(CacheMixin, self).write(chunk)

    def prepare(self):
        super(CacheMixin, self).prepare()
        key = self._generate_key()
        cached = self.cache.get(key)
        if cached is not None:
            self.write_cache(pickle.loads(cached))
            self.finish()

    def write(self, chunk):
        key = self._generate_key()
        expiration = getattr(self, &#39;expiration&#39;, 300)
        self.cache.set(key, pickle.dumps(chunk), expiration)
        super(CacheMixin, self).write(chunk)


def set_cache_timeout(expiration=300):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(handler, *args, **kwargs):
            handler.expiration = expiration
            return func(handler, *args, **kwargs)

        return wrapper

    return decorator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;CacheMixin&lt;/code&gt; 在定义 Handler 时作为基类传入，覆盖 &lt;code&gt;tornado.web.RequestHandler&lt;/code&gt; 的 &lt;code&gt;prepare&lt;/code&gt; 和 &lt;code&gt;write&lt;/code&gt;，实现缓存机制。&lt;code&gt;self.application.cache&lt;/code&gt; 意味着初始化 &lt;code&gt;tornado.web.Application&lt;/code&gt; 时需要配置一个 &lt;code&gt;cache&lt;/code&gt; 属性，至少需要实现 &lt;code&gt;get&lt;/code&gt; 和支持超时的 &lt;code&gt;set&lt;/code&gt; 方法。常见的是定义一个 &lt;code&gt;CacheBackend&lt;/code&gt; 和一套 &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; 接口，然后封装不同的缓存实现，比如 Redis，Memcache 等。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;set_cache_timeout&lt;/code&gt; 提供了自定义缓存失效时间的能力，这个装饰器不是必须的，与之等价的方式是在 Handler 的 &lt;code&gt;get&lt;/code&gt; 方法的第一行（或第一个调用 &lt;code&gt;self.write&lt;/code&gt; 语句前）加上：&lt;code&gt;self.expiration = TIMEOUT_IN_SECONDS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;一个没什么实际意义的使用示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Class HelloHandler(CacheMixin, tornado.web.RequestHandler):
    
    @set_cache_timeout(86400)
    def get(self):
        self.write(&amp;quot;Hello world!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;flask-的实现:a2bd452655e299f799e36f1a03619c2b&#34;&gt;Flask 的实现&lt;/h2&gt;

&lt;p&gt;Flask 里可以用 &lt;code&gt;before_request&lt;/code&gt; 和 &lt;code&gt;after_request&lt;/code&gt; 这两个 hooks 实现 Tornado 里覆盖 &lt;code&gt;prepare&lt;/code&gt; 和 &lt;code&gt;write&lt;/code&gt; 来缓存所有请求，具体实现大同小异。也可以用装饰器来获得更好的灵活性。&lt;/p&gt;

&lt;p&gt;在看具体实现之前，先推荐一个 Flask 的缓存扩展：&lt;a href=&#34;https://pythonhosted.org/Flask-Cache/&#34;&gt;Flask-Cache&lt;/a&gt;. Flask-Cache 基于 &lt;code&gt;werkzeug.contrib.cache&lt;/code&gt;，后者定义了一套缓存接口和实现了多种不同 Backend 的缓存实现；Flask-Cache 在此基础上针对 Flask 做了一些应用性集成以及提供了一些其他的辅助函数。&lt;/p&gt;

&lt;p&gt;下面的例子用的是 Flask-Cache，后端用 Redis，具体的配置见 Flask-Cache 的官方文档。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    import cPickle as pickle
except ImportError:
    import pickle

import hashlib
import functools

from flask import g


class cached_response(object):
    def __init__(self, timeout=300):
        self.timeout = timeout or 300

    def _generate_key(self):
        data = pickle.dumps((request.path, request.values))
        key = hashlib.sha1(data).hexdigest()
        return self._with_prefix(key)

    @staticmethod
    def _with_prefix(key):
        return &#39;%s:%s&#39; % (request.path, key)

    def __call__(self, view_func):
        @functools.wraps(view_func)
        def decorator(*args, **kwargs):
            key = self._generate_key()
            response = cache.get(key)
            if response:
                return response

            response = view_func(*args, **kwargs)

            # 允许 view 函数通过设置 g.disable_cache = True 来控制不缓存本次请求的结果
            if getattr(g, &#39;disable_cache&#39;, False):
                return response
            
            # 只缓存 200 的请求结果
            if response.status_code == 200:
                cache.set(key, response, self.timeout)
        
            return response

        return decorator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;cached_response&lt;/code&gt; 是一个基于类的装饰器实现，接受 &lt;code&gt;timeout&lt;/code&gt; 参数指定缓存失效时间。用 &lt;code&gt;request.path&lt;/code&gt; 和 &lt;code&gt;request.values&lt;/code&gt; 序列化后的哈希值来标示相同的参数的请求（与 Tornado 版本类似）。上面的实现还展现出了一些可定制性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;只缓存 StatusCode 为 200 的请求结果&lt;/li&gt;
&lt;li&gt;允许 endpoint 通过设置 &lt;code&gt;g.disable_cache = True&lt;/code&gt; 来控制不缓存&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了这两点，还可以做其他定制，比如通过请求参数传入 &lt;code&gt;nocache=1&lt;/code&gt; 来控制获取实时结果，通过设置 &lt;code&gt;g.cache_timeout = 100&lt;/code&gt; 来覆盖默认的缓存失效时间。&lt;/p&gt;

&lt;p&gt;使用起来也很简单，只需要注册一个装饰器就可以：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.route(&#39;/hello/&#39;)
@cached_response(86400)
def hello():
    return &amp;quot;Hello, world!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;结语:a2bd452655e299f799e36f1a03619c2b&#34;&gt;结语&lt;/h2&gt;

&lt;p&gt;上面展示了在 Tornado 和 Flask 项目里缓存请求结果的实现方法，实际使用的时候，还是要结合具体情况做定制和调整。缓存也是一把双刃剑，在享受缓存带来性能提升的同时也要注意可能引入的问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用 WTForms 和装饰器做表单校验</title>
      <link>http://deanthompson.github.io/posts/2015/10/using-wtforms-and-decorator-to-validate-form-in-flask</link>
      <pubDate>Sat, 31 Oct 2015 01:46:10 CST</pubDate>
      <author>Yangliang Li</author>
      <guid>http://deanthompson.github.io/posts/2015/10/using-wtforms-and-decorator-to-validate-form-in-flask</guid>
      <description>&lt;p&gt;在一个 Web 应用里，不管是为了业务逻辑的正确性，还是系统安全性，做好参数（querystring, form, json）验证都是非常必要的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wtforms/wtforms&#34;&gt;WTForms&lt;/a&gt; 是一个非常好用而且强大的表单校验和渲染的库，提供 Form 基类用于定义表单结构（类似 ORM），内置了丰富的字段类型和校验方法，可以很方便的用来做校验。如果应用需要输出 HTML，集成到模板里也很容易。对于 JSON  API 应用，用不到渲染的功能，但是结构化的表单和校验功能依然非常有用。&lt;/p&gt;

&lt;p&gt;以一个注册的应用场景为例，用户输入用户名、邮箱、密码、确认密码，服务程序先检查参数然后处理登录逻辑。这几个字段都是必填的，此外还有一些额外的限制：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用户名：长度在 3-20 之间&lt;/li&gt;
&lt;li&gt;邮箱：合法的邮箱格式，比如 &amp;ldquo;abc&amp;rdquo; 就不合法&lt;/li&gt;
&lt;li&gt;密码：长度在 8-20 之间，必须同时包含大小写字母&lt;/li&gt;
&lt;li&gt;确认密码：必须与密码一致&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果参数不合法，返回 400；登录逻辑略去不表。&lt;/p&gt;

&lt;p&gt;最原始的做法，就是直接在注册的接口里取出每个参数，逐个手动校验。这种做法可能的代码是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.route(&#39;/user/signup/&#39;, methods=[&#39;POST&#39;])
def register():
    username = request.form.get(&#39;username&#39;)
    if not username or not (3 &amp;lt;= len(username) &amp;lt;= 20):
        abort(400)
    
    email = request.form.get(&#39;email&#39;)
    if not email or not re.match(EMAIL_REGEX, email):
        abort(400)
    
    password = request.form.get(&#39;password&#39;)
    if not password:
        abort(400)
    if password == password.lower() or password == password.upper():
        abort(400)
    
    confirm_password = request.form.get(&#39;confirm_password&#39;)
    if not confirm_password or confirm_password != password:
        abort(400)
    
    # 处理注册的逻辑
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有可能是我的写法不太对，但是这样检查参数的合法性，实在不够优雅。检查参数的代码行数甚至超出了注册的逻辑，也有些喧宾夺主的感觉。可以把这些代码移出来，使得业务逻辑代码更加清晰一点。下面先用 WTForms 来改造一下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from wtforms import Form
from wtforms.fields import StringField, PasswordField
from wtforms.validators import DataRequired, Email, Length, EqualTo, ValidationError


class SignupForm(Form):
    username = StringField(validators=[DataRequired(), Length(3, 20)])
    email = StringField(validators=[DataRequired(), Email()])
    password = PasswordField(validators=[DataRequired()])
    confirm_password = PasswordField(validators=[DataRequired(), EqualTo(&#39;password&#39;)])
    
    def validate_password(self, field):
        password = field.data
        if password == password.lower() or password == passowrd.upper():
            raise ValidationError(u&#39;必须同时包含大小写字母&#39;)


@app.route(&#39;/user/signup/&#39;, methods=[&#39;POST&#39;])
def register():
    form = SignupForm(formdata=request.form)
    if not form.validate():
        abort(400)
    
    # 处理注册逻辑，参数从 form 对象获取，比如
    username = form.username.data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个版本带来的好处很明显：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;参数更加结构化了，所有字段名和类型一目了然&lt;/li&gt;
&lt;li&gt;有内置的，语义清晰的校验方法，可以组合使用&lt;/li&gt;
&lt;li&gt;还能自定义额外的校验方法，方法签名是 &lt;code&gt;def validate_xx(self, field)&lt;/code&gt;，其中 &lt;code&gt;xx&lt;/code&gt; 是字段名，通过 &lt;code&gt;field.data&lt;/code&gt; 来获取输入的值&lt;/li&gt;
&lt;li&gt;还有没体现出来的，就是丰富的错误提示信息，既有内置的，也可以自定义&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;再看原来的 &lt;code&gt;register&lt;/code&gt; 方法，代码变得更加简洁和清晰，整体的编码质量也得到了提升。&lt;/p&gt;

&lt;p&gt;那么再考虑一下更复杂的场景，在一个返回 JSON 的 API 应用里，有很多 API，有不同的参数提交方式（GET 方法通过 query string，POST 方法可能有 form 和 JSON），一样的校验错误处理方式（abort(400) 或其他）。我们依然可以像上面那样处理，但如果再借助装饰器改进一下，又能少写几行“重复”的代码。&lt;/p&gt;

&lt;p&gt;需要注意的是，WTForms 的 formdata 支持的是类似 Werkzeug/Django/WebOb 中的 &lt;code&gt;MultiDict&lt;/code&gt; 的数据结构。Flask 中的 &lt;code&gt;request.json&lt;/code&gt; 是一个 &lt;code&gt;dict&lt;/code&gt; 类型，所以需要先包装一下。&lt;/p&gt;

&lt;p&gt;继续改造注册的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import functools

from werkzeug.datastructures import MultiDict


def validate_form(form_class):
    def decorator(view_func):
        @functools.wraps(view_func)
        def inner(*args, **kwargs):
            if request.method == &#39;GET&#39;:
                formdata = request.args
            else:
                if request.json:
                    formdata = MultiDict(request.json)
                else:
                    formdata = request.form
                    
            form = form_class(formdata=formdata)
            if not form.validate():
                return jsonify(code=400, message=form.errors), 400

            g.form = form
            return view_func(*args, **kwargs)

        return inner

    return decorator


@app.route(&#39;/user/signup/&#39;, methods=[&#39;POST&#39;])
@validate_form(form_class=SignupForm)
def register():
    form = g.form   # 运行到这里，说明表单是合法的

    # 处理注册逻辑，参数从 form 对象获取，比如
    username = form.username.data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实现了一个叫 &lt;code&gt;validate_form&lt;/code&gt; 的装饰器，指定一个 Form 类，处理统一的参数获取、校验和错误处理，如果一切正确，再把 Form 对象保存到全局变量 &lt;code&gt;g&lt;/code&gt; 里面，这样就可以在 view 函数里取出来用了。现在的 &lt;code&gt;register&lt;/code&gt; 方法变得更加简洁，甚至都看不到检查参数的那些代码，只需要关心具体的和注册相关的逻辑本身就好。&lt;/p&gt;

&lt;p&gt;这个装饰器的可重用性非常好，其他的接口只要定义一个 Form 类，然后调用一下装饰器，再从 &lt;code&gt;g&lt;/code&gt; 获取 Form 对象。不仅省了很多心思和体力劳动，代码也变得更加清晰优雅和 Pythonic.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Flask 路由做范围限制</title>
      <link>http://deanthompson.github.io/posts/2014/02/range-validation-in-flask-routing</link>
      <pubDate>Wed, 26 Feb 2014 23:15:42 CST</pubDate>
      <author>Yangliang Li</author>
      <guid>http://deanthompson.github.io/posts/2014/02/range-validation-in-flask-routing</guid>
      <description>

&lt;p&gt;这其实是我之前在 StackOverflow 上回答过的一道题，令我感到意外的是，这个问题只有我一个人回答，而且我也获得了 8 个赞同。小小的成就感。&lt;/p&gt;

&lt;h1 id=&#34;1-what:6e1d883f88cf13596243023295e5bb32&#34;&gt;1. What&lt;/h1&gt;

&lt;p&gt;原题在这里：&lt;a href=&#34;http://stackoverflow.com/questions/19076226/how-to-validate-integer-range-in-flask-routing-werkzeug/&#34;&gt;How to validate integer range in Flask routing (Werkzeug)?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简单翻译一下，大致如下：&lt;/p&gt;

&lt;p&gt;Flask 应用里面有一个这样的路由&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from foo import get_foo

@app.route(&amp;quot;/foo/&amp;lt;int:id&amp;gt;&amp;quot;)
def foo_id(id):
    return render_template(&#39;foo.html&#39;, foo = get_foo(id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;id&lt;/code&gt; 的取值是 &lt;code&gt;1～300&lt;/code&gt;，如何在路由层级做这个验证？也就是一个类似于这样的东西 &lt;code&gt;@app.route(&amp;quot;/foo/&amp;lt;int:id(1-300)&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;2-how:6e1d883f88cf13596243023295e5bb32&#34;&gt;2. How&lt;/h1&gt;

&lt;p&gt;这个问题其实对我很有启发，虽然平时都在用 Flask 做项目，但是没有考虑过在 router 层面做验证。虽然在应用场景中可能用处不大，但至少可能存在这个选项，在一些特殊的场景下可以很方便的处理非法请求。&lt;/p&gt;

&lt;p&gt;虽然没用过参数验证，但是对 Flask 的路由规则还是比较熟悉的，也用过转换器（converter）。整体而言，Flask 基于一个 &lt;a href=&#34;http://werkzeug.pocoo.org/&#34;&gt;WSGI Utility Library: Werkzeug&lt;/a&gt; 和 &lt;a href=&#34;http://jinja.pocoo.org&#34;&gt;模板引擎 Jinja2&lt;/a&gt;，其中路由规则就是基于 Werkzeug 的。Werkzeug 提供了几种 builtin converters 用于将 URL 里的参数转换成对应 python 的数据类型，而事实上这就已经进行了一次类型检查。&lt;/p&gt;

&lt;h2 id=&#34;2-1-builtin-converters:6e1d883f88cf13596243023295e5bb32&#34;&gt;2.1 Builtin Converters&lt;/h2&gt;

&lt;p&gt;如前所述，Werkzeug 提供了几种 &lt;a href=&#34;http://werkzeug.pocoo.org/docs/routing/#builtin-converters&#34;&gt;builtin converters&lt;/a&gt;，分别是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class werkzeug.routing.UnicodeConverter(map, minlength=1, maxlength=None, length=None)&lt;/code&gt;：字符串转换器，接受除了路径类型（含有 &lt;code&gt;/&lt;/code&gt;）的所有字符串，这也是默认的转换器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class werkzeug.routing.PathConverter(map)&lt;/code&gt;：路径类型转换器，一般用得不多吧。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class werkzeug.routing.IntegerConverter(map, fixed_digits=0, min=None, max=None)&lt;/code&gt;：整型转换器，接受并转换成 &lt;code&gt;int&lt;/code&gt; 类型，不支持负数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class werkzeug.routing.FloatConverter(map, min=None, max=None)&lt;/code&gt;：浮点型转换器，接受并转换成 &lt;code&gt;float&lt;/code&gt; 类型，不支持负数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class werkzeug.routing.AnyConverter(map, *items)&lt;/code&gt;：匹配任意一个给定的选项，这些选项可以是 python 标识符或字符串。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从文档里可以看到，有些转换器是支持一些简单的范围验证。如 UnicodeConverter 可以检查字符串的最小长度（&lt;code&gt;minlength&lt;/code&gt;）、最大长度（&lt;code&gt;maxlength&lt;/code&gt;）或者指定长度（&lt;code&gt;length&lt;/code&gt;）。IntergerConverter 和 FloatConverter 都可以指定最小值（&lt;code&gt;min&lt;/code&gt;）和最大值（&lt;code&gt;max&lt;/code&gt;）。所以看完这些，就可以解决最开始的问题了。&lt;/p&gt;

&lt;h2 id=&#34;2-2-solution:6e1d883f88cf13596243023295e5bb32&#34;&gt;2.2 Solution&lt;/h2&gt;

&lt;p&gt;回到原题，是需要对 &lt;code&gt;id&lt;/code&gt; 做范围限制（&lt;code&gt;1～300&lt;/code&gt;），因此路由就可以这样写了（&lt;a href=&#34;http://stackoverflow.com/a/19076418/1461780&#34;&gt;我的回答&lt;/a&gt;）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from foo import get_foo

@app.route(&amp;quot;/foo/&amp;lt;int(min=1, max=300):id&amp;gt;&amp;quot;)
def foo_id(id):
    return render_template(&#39;foo.html&#39;, foo = get_foo(id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个路由就限定了 &lt;code&gt;id&lt;/code&gt; 的范围，对于超出范围的请求，如 &lt;code&gt;/foo/1024/&lt;/code&gt;，就会找不到对应的路由，因此会返回 &lt;code&gt;404&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&#34;3-end:6e1d883f88cf13596243023295e5bb32&#34;&gt;3. End&lt;/h1&gt;

&lt;p&gt;题外话，其实题主开始的时候是在函数内部做了参数检测（我也基本这么干），而且最后也没有采用在路由做限制的方法。原因上面已经说了，就是对于超出范围的请求，会直接返回 &lt;code&gt;404&lt;/code&gt;，某些情况下这是可以接受的，但另外的情况下最好能让用户知道他的请求到底哪里出了问题。用哪种方案取决于具体的应用场景，但对我来说至少多了一个选项，也对 converters 相关的内容更了解了一些。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

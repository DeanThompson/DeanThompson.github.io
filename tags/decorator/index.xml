<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Decorator on 李林克斯 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://deanthompson.github.io/tags/decorator/index.xml</link>
    <language>zh-CN</language>
    <author>Yangliang Li</author>
    
    <updated>Mon, 01 Jan 0001 00:00:00 UTC</updated>
    
    <item>
      <title>用 WTForms 和装饰器做表单校验</title>
      <link>http://deanthompson.github.io/posts/2015/10/using-wtforms-and-decorator-to-validate-form-in-flask</link>
      <pubDate>Sat, 31 Oct 2015 01:46:10 CST</pubDate>
      <author>Yangliang Li</author>
      <guid>http://deanthompson.github.io/posts/2015/10/using-wtforms-and-decorator-to-validate-form-in-flask</guid>
      <description>&lt;p&gt;在一个 Web 应用里，不管是为了业务逻辑的正确性，还是系统安全性，做好参数（querystring, form, json）验证都是非常必要的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/wtforms/wtforms&#34;&gt;WTForms&lt;/a&gt; 是一个非常好用而且强大的表单校验和渲染的库，提供 Form 基类用于定义表单结构（类似 ORM），内置了丰富的字段类型和校验方法，可以很方便的用来做校验。如果应用需要输出 HTML，集成到模板里也很容易。对于 JSON  API 应用，用不到渲染的功能，但是结构化的表单和校验功能依然非常有用。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;以一个注册的应用场景为例，用户输入用户名、邮箱、密码、确认密码，服务程序先检查参数然后处理登录逻辑。这几个字段都是必填的，此外还有一些额外的限制：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用户名：长度在 3-20 之间&lt;/li&gt;
&lt;li&gt;邮箱：合法的邮箱格式，比如 &amp;ldquo;abc&amp;rdquo; 就不合法&lt;/li&gt;
&lt;li&gt;密码：长度在 8-20 之间，必须同时包含大小写字母&lt;/li&gt;
&lt;li&gt;确认密码：必须与密码一致&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果参数不合法，返回 400；登录逻辑略去不表。&lt;/p&gt;

&lt;p&gt;最原始的做法，就是直接在注册的接口里取出每个参数，逐个手动校验。这种做法可能的代码是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@app.route(&#39;/user/signup/&#39;, methods=[&#39;POST&#39;])
def register():
    username = request.form.get(&#39;username&#39;)
    if not username or not (3 &amp;lt;= len(username) &amp;lt;= 20):
        abort(400)
    
    email = request.form.get(&#39;email&#39;)
    if not email or not re.match(EMAIL_REGEX, email):
        abort(400)
    
    password = request.form.get(&#39;password&#39;)
    if not password:
        abort(400)
    if password == password.lower() or password == password.upper():
        abort(400)
    
    confirm_password = request.form.get(&#39;confirm_password&#39;)
    if not confirm_password or confirm_password != password:
        abort(400)
    
    # 处理注册的逻辑
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有可能是我的写法不太对，但是这样检查参数的合法性，实在不够优雅。检查参数的代码行数甚至超出了注册的逻辑，也有些喧宾夺主的感觉。可以把这些代码移出来，使得业务逻辑代码更加清晰一点。下面先用 WTForms 来改造一下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from wtforms import Form
from wtforms.fields import StringField, PasswordField
from wtforms.validators import DataRequired, Email, Length, EqualTo, ValidationError


class SignupForm(Form):
    username = StringField(validators=[DataRequired(), Length(3, 20)])
    email = StringField(validators=[DataRequired(), Email()])
    password = PasswordField(validators=[DataRequired()])
    confirm_password = PasswordField(validators=[DataRequired(), EqualTo(&#39;password&#39;)])
    
    def validate_password(self, field):
        password = field.data
        if password == password.lower() or password == passowrd.upper():
            raise ValidationError(u&#39;必须同时包含大小写字母&#39;)


@app.route(&#39;/user/signup/&#39;, methods=[&#39;POST&#39;])
def register():
    form = SignupForm(formdata=request.form)
    if not form.validate():
        abort(400)
    
    # 处理注册逻辑，参数从 form 对象获取，比如
    username = form.username.data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个版本带来的好处很明显：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;参数更加结构化了，所有字段名和类型一目了然&lt;/li&gt;
&lt;li&gt;有内置的，语义清晰的校验方法，可以组合使用&lt;/li&gt;
&lt;li&gt;还能自定义额外的校验方法，方法签名是 &lt;code&gt;def validate_xx(self, field)&lt;/code&gt;，其中 &lt;code&gt;xx&lt;/code&gt; 是字段名，通过 &lt;code&gt;field.data&lt;/code&gt; 来获取输入的值&lt;/li&gt;
&lt;li&gt;还有没体现出来的，就是丰富的错误提示信息，既有内置的，也可以自定义&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;再看原来的 &lt;code&gt;register&lt;/code&gt; 方法，代码变得更加简洁和清晰，整体的编码质量也得到了提升。&lt;/p&gt;

&lt;p&gt;那么再考虑一下更复杂的场景，在一个返回 JSON 的 API 应用里，有很多 API，有不同的参数提交方式（GET 方法通过 query string，POST 方法可能有 form 和 JSON），一样的校验错误处理方式（abort(400) 或其他）。我们依然可以像上面那样处理，但如果再借助装饰器改进一下，又能少写几行“重复”的代码。&lt;/p&gt;

&lt;p&gt;需要注意的是，WTForms 的 formdata 支持的是类似 Werkzeug/Django/WebOb 中的 &lt;code&gt;MultiDict&lt;/code&gt; 的数据结构。Flask 中的 &lt;code&gt;request.json&lt;/code&gt; 是一个 &lt;code&gt;dict&lt;/code&gt; 类型，所以需要先包装一下。&lt;/p&gt;

&lt;p&gt;继续改造注册的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import functools

from werkzeug.datastructures import MultiDict


def validate_form(form_class):
    def decorator(view_func):
        @functools.wraps(view_func)
        def inner(*args, **kwargs):
            if request.method == &#39;GET&#39;:
                formdata = request.args
            else:
                if request.json:
                    formdata = MultiDict(request.json)
                else:
                    formdata = request.form
                    
            form = form_class(formdata=formdata)
            if not form.validate():
                return jsonify(code=400, message=form.errors), 400

            g.form = form
            return view_func(*args, **kwargs)

        return inner

    return decorator


@app.route(&#39;/user/signup/&#39;, methods=[&#39;POST&#39;])
@validate_form(form_class=SignupForm)
def register():
    form = g.form   # 运行到这里，说明表单是合法的

    # 处理注册逻辑，参数从 form 对象获取，比如
    username = form.username.data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实现了一个叫 &lt;code&gt;validate_form&lt;/code&gt; 的装饰器，指定一个 Form 类，处理统一的参数获取、校验和错误处理，如果一切正确，再把 Form 对象保存到全局变量 &lt;code&gt;g&lt;/code&gt; 里面，这样就可以在 view 函数里取出来用了。现在的 &lt;code&gt;register&lt;/code&gt; 方法变得更加简洁，甚至都看不到检查参数的那些代码，只需要关心具体的和注册相关的逻辑本身就好。&lt;/p&gt;

&lt;p&gt;这个装饰器的可重用性非常好，其他的接口只要定义一个 Form 类，然后调用一下装饰器，再从 &lt;code&gt;g&lt;/code&gt; 获取 Form 对象。不仅省了很多心思和体力劳动，代码也变得更加清晰优雅和 Pythonic.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【翻译】理解 Python 装饰器</title>
      <link>http://deanthompson.github.io/posts/2013/03/understand-python-decorators</link>
      <pubDate>Wed, 13 Mar 2013 00:26:58 CST</pubDate>
      <author>Yangliang Li</author>
      <guid>http://deanthompson.github.io/posts/2013/03/understand-python-decorators</guid>
      <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;

&lt;p&gt;前段时间在 stack overflow 上看到一个关于 python decorator（装饰器）的问题，有一个人很耐心的写了一篇很长的教程。我也很耐心的看完了，获益匪浅。现在尝试翻译过来，尽量追求准确和尊重原文。不明白的地方，或翻译不好的地方，请参照原文，地址：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/739654/understanding-python-decorators#answer-1594484&#34;&gt;Understanding Python decorators&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;1-python的函数是对象-python-s-functions-are-objects&#34;&gt;1. python的函数是对象（Python&amp;rsquo;s functions are objects）&lt;/h1&gt;

&lt;p&gt;要理解装饰器，就必须先知道，在python里，函数也是对象（functions are objects）。明白这一点非常重要，让我们通过一个例子来看看为什么。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def shout(word=&amp;quot;yes&amp;quot;):
    return word.capitalize()+&amp;quot;!&amp;quot;
 
print shout()
# outputs : &#39;Yes!&#39;
 
# 作为一个对象，你可以像其他对象一样把函数赋值给其他变量
 
scream = shout
 
# 注意我们没有用括号：我们不是在调用函数，
# 而是把函数&#39;shout&#39;的值绑定到&#39;scream&#39;这个变量上
# 这也意味着你可以通过&#39;scream&#39;这个变量来调用&#39;shout&#39;函数
 
print scream()
# outputs : &#39;Yes!&#39;
 
# 不仅如此，这也还意味着你可以把原来的名字&#39;shout&#39;删掉，
# 而这个函数仍然可以通过&#39;scream&#39;来访问
del shout
try:
    print shout()
except NameError, e:
    print e
    #outputs: &amp;quot;name &#39;shout&#39; is not defined&amp;quot;
 
print scream()
outputs: &#39;Yes!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK，先记住这点，我们马上会用到。python 函数的另一个有趣的特性是，它们可以在另一个函数体内定义。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def talk():
 
    # 你可以在 &#39;talk&#39; 里动态的(on the fly)定义一个函数...
    def whisper(word=&amp;quot;yes&amp;quot;):
        return word.lower()+&amp;quot;...&amp;quot;
 
    # ... 然后马上调用它！
 
    print whisper()
 
# 每当调用&#39;talk&#39;，都会定义一次&#39;whisper&#39;，然后&#39;whisper&#39;在&#39;talk&#39;里被调用
talk()
# outputs:
# &amp;quot;yes...&amp;quot;
 
# 但是&amp;quot;whisper&amp;quot; 在 &amp;quot;talk&amp;quot;外并不存在:
 
try:
    print whisper()
except NameError, e:
    print e
    #outputs : &amp;quot;name &#39;whisper&#39; is not defined&amp;quot;*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;2-函数引用-functions-references&#34;&gt;2. 函数引用（Functions references）&lt;/h1&gt;

&lt;p&gt;OK，还在吧？！现在到了有趣的部分，你刚刚已经知道了，python的函数也是对象，因此：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可以被赋值给变量&lt;/li&gt;
&lt;li&gt;可以在另一个函数体内定义&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么，这样就意味着一个函数可以返回另一个函数 :-)，来看个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def getTalk(type=&amp;quot;shout&amp;quot;):
 
    # 我们先动态定义一些函数
    def shout(word=&amp;quot;yes&amp;quot;):
        return word.capitalize()+&amp;quot;!&amp;quot;
 
    def whisper(word=&amp;quot;yes&amp;quot;) :
        return word.lower()+&amp;quot;...&amp;quot;;
 
    # 然后返回其中一个
    if type == &amp;quot;shout&amp;quot;:
        # 注意：我们是在返回函数对象，而不是调用函数，
        # 所以不要用到括号 &amp;quot;()&amp;quot;
        return shout 
    else:
        return whisper
 
# 那你改如何使用这个怪兽呢？(How do you use this strange beast?)
 
# 先把函数赋值给一个变量
talk = getTalk()     
 
# 你可以发现 &amp;quot;talk&amp;quot; 其实是一个函数对象:
print talk
#outputs : &amp;lt;function shout at 0xb7ea817c&amp;gt;
 
# 这个对象就是 getTalk 函数返回的:
print talk()
#outputs : Yes!
 
# 你甚至还可以直接这样使用(if you feel wild):
print getTalk(&amp;quot;whisper&amp;quot;)()
#outputs : yes...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是等等，还有呢。既然可以返回一个函数，那么也就可以像参数一样传递：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def doSomethingBefore(func):
    print &amp;quot;I do something before then I call the function you gave me&amp;quot;
    print func()
 
doSomethingBefore(scream)
#outputs:
#I do something before then I call the function you gave me
#Yes!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那好，你现在已经具备了理解装饰器的所有基础知识了。你看，装饰器也就是一种包装材料，&lt;strong&gt;它们可以让你在执行被装饰的函数之前或之后执行其他代码，而且不需要修改函数本身&lt;/strong&gt;。（原句比较长：You see, decorators are wrappers which means that they let you execute code before and after the function they decorate without the need to modify the function itself.）&lt;/p&gt;

&lt;h1 id=&#34;3-手工制作装饰器-handcrafted-decorators&#34;&gt;3. 手工制作装饰器（Handcrafted decorators）&lt;/h1&gt;

&lt;p&gt;你可以像这样来定制：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 一个装饰器是一个需要另一个函数作为参数的函数
def my_shiny_new_decorator(a_function_to_decorate):
 
    # 在装饰器内部动态定义一个函数：wrapper(原意：包装纸).
    # 这个函数将被包装在原始函数的四周
    # 因此就可以在原始函数之前和之后执行一些代码.
    def the_wrapper_around_the_original_function():
 
        # 把想要在调用原始函数前运行的代码放这里
        print &amp;quot;Before the function runs&amp;quot;
 
        # 调用原始函数（需要带括号）
        a_function_to_decorate()
 
        # 把想要在调用原始函数后运行的代码放这里
        print &amp;quot;After the function runs&amp;quot;
 
    # 直到现在，&amp;quot;a_function_to_decorate&amp;quot;还没有执行过 (HAS NEVER BEEN EXECUTED).
    # 我们把刚刚创建的 wrapper 函数返回.
    # wrapper 函数包含了这个函数，还有一些需要提前后之后执行的代码，
    # 可以直接使用了（It&#39;s ready to use!）
    return the_wrapper_around_the_original_function
 
# Now imagine you create a function you don&#39;t want to ever touch again.
def a_stand_alone_function():
    print &amp;quot;I am a stand alone function, don&#39;t you dare modify me&amp;quot;
 
a_stand_alone_function()
#outputs: I am a stand alone function, don&#39;t you dare modify me
 
# 现在，你可以装饰一下来修改它的行为.
# 只要简单的把它传递给装饰器，后者能用任何你想要的代码动态的包装
# 而且返回一个可以直接使用的新函数:
 
a_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)
a_stand_alone_function_decorated()
#outputs:
#Before the function runs
#I am a stand alone function, don&#39;t you dare modify me
#After the function runs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在你大概希望，每次调用 &lt;code&gt;a_stand_alone_function&lt;/code&gt; 时，实际调用的是 &lt;code&gt;a_stand_alone_function_decorated&lt;/code&gt; 。这很容易，只要把 &lt;code&gt;my_shiny_new_decorator&lt;/code&gt; 返回的函数覆盖 &lt;code&gt;a_stand_alone_function&lt;/code&gt; 就可以了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a_stand_alone_function = my_shiny_new_decorator(a_stand_alone_function)
a_stand_alone_function()
#outputs:
#Before the function runs
#I am a stand alone function, don&#39;t you dare modify me
#After the function runs
 
# And guess what? That&#39;s EXACTLY what decorators do!
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;4-揭秘装饰器-decorators-demystified&#34;&gt;4. 揭秘装饰器(Decorators demystified)&lt;/h1&gt;

&lt;p&gt;我们用装饰器的语法来重写一下前面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@my_shiny_new_decorator
def another_stand_alone_function():
    print &amp;quot;Leave me alone&amp;quot;
 
another_stand_alone_function() 
#outputs: 
#Before the function runs
#Leave me alone
#After the function runs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是的，这就完了，就这么简单。&lt;code&gt;@decorator&lt;/code&gt; 只是下面这条语句的简写(shortcut)：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;another_stand_alone_function = my_shiny_new_decorator(another_stand_alone_function)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;装饰器其实就是装饰器模式的一个python化的变体（pythonic variant）。为了方便开发，python已经内置了好几种经典的设计模式，比如迭代器（iterators）。
当然，你还可以堆积使用装饰器(you can cumulate decorators)：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def bread(func):
    def wrapper():
        print &amp;quot;&amp;lt;/&#39;&#39;&#39;&#39;&#39;&#39;\&amp;gt;&amp;quot;
        func()
        print &amp;quot;&amp;lt;\______/&amp;gt;&amp;quot;
    return wrapper
 
def ingredients(func):
    def wrapper():
        print &amp;quot;#tomatoes#&amp;quot;
        func()
        print &amp;quot;~salad~&amp;quot;
    return wrapper
 
def sandwich(food=&amp;quot;--ham--&amp;quot;):
    print food
 
sandwich()
#outputs: --ham--
sandwich = bread(ingredients(sandwich))
sandwich()
#outputs:
#&amp;lt;/&#39;&#39;&#39;&#39;&#39;&#39;\&amp;gt;
# #tomatoes#
# --ham--
# ~salad~
#&amp;lt;\______/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用python的装饰器语法表示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@bread
@ingredients
def sandwich(food=&amp;quot;--ham--&amp;quot;):
    print food
 
sandwich()
#outputs:
#&amp;lt;/&#39;&#39;&#39;&#39;&#39;&#39;\&amp;gt;
# #tomatoes#
# --ham--
# ~salad~
#&amp;lt;\______/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;装饰器放置的顺序 &lt;strong&gt;很重要&lt;/strong&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@ingredients
@bread
def strange_sandwich(food=&amp;quot;--ham--&amp;quot;):
    print food
 
strange_sandwich()
#outputs:
##tomatoes#
#&amp;lt;/&#39;&#39;&#39;&#39;&#39;&#39;\&amp;gt;
# --ham--
#&amp;lt;\______/&amp;gt;
# ~salad~
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;5-回答题主问题-略&#34;&gt;5. 回答题主问题，略&lt;/h1&gt;

&lt;h1 id=&#34;6-给装饰器函数传参-passing-arguments-to-the-decorated-function&#34;&gt;6. 给装饰器函数传参（Passing arguments to the decorated function）&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 这不是什么黑色魔法(black magic)，你只是必须让wrapper传递参数:
 
def a_decorator_passing_arguments(function_to_decorate):
    def a_wrapper_accepting_arguments(arg1, arg2):
        print &amp;quot;I got args! Look:&amp;quot;, arg1, arg2
        function_to_decorate(arg1, arg2)
    return a_wrapper_accepting_arguments
 
# 当你调用装饰器返回的函数式，你就在调用wrapper，而给wrapper的
# 参数传递将会让它把参数传递给要装饰的函数
 
@a_decorator_passing_arguments
def print_full_name(first_name, last_name):
    print &amp;quot;My name is&amp;quot;, first_name, last_name
 
print_full_name(&amp;quot;Peter&amp;quot;, &amp;quot;Venkman&amp;quot;)
# outputs:
#I got args! Look: Peter Venkman
#My name is Peter 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;7-装饰方法-decorating-methods&#34;&gt;7. 装饰方法（Decorating methods）&lt;/h1&gt;

&lt;p&gt;Python的一个伟大之处在于：方法和函数几乎是一样的(methods and functions are really the same)，除了方法的第一个参数应该是当前对象的引用(也就是 self)。这也就意味着只要记住把 self 考虑在内，你就可以用同样的方法给方法创建装饰器了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def method_friendly_decorator(method_to_decorate):
    def wrapper(self, lie):
        lie = lie - 3 # very friendly, decrease age even more :-)
        return method_to_decorate(self, lie)
    return wrapper
 
 
class Lucy(object):
 
    def __init__(self):
        self.age = 32
 
    @method_friendly_decorator
    def sayYourAge(self, lie):
        print &amp;quot;I am %s, what did you think?&amp;quot; % (self.age + lie)
 
l = Lucy()
l.sayYourAge(-3)
#outputs: I am 26, what did you think?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，如果你想编写一个非常通用的装饰器，可以用来装饰任意函数和方法，你就可以无视具体参数了，直接使用 &lt;code&gt;*args&lt;/code&gt;, &lt;code&gt;**kwargs&lt;/code&gt; 就行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def a_decorator_passing_arbitrary_arguments(function_to_decorate):
    # The wrapper accepts any arguments
    def a_wrapper_accepting_arbitrary_arguments(*args, **kwargs):
        print &amp;quot;Do I have args?:&amp;quot;
        print args
        print kwargs
        # Then you unpack the arguments, here *args, **kwargs
        # If you are not familiar with unpacking, check:
        # http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/
        function_to_decorate(*args, **kwargs)
    return a_wrapper_accepting_arbitrary_arguments
 
@a_decorator_passing_arbitrary_arguments
def function_with_no_argument():
    print &amp;quot;Python is cool, no argument here.&amp;quot;
 
function_with_no_argument()
#outputs
#Do I have args?:
#()
#{}
#Python is cool, no argument here.
 
@a_decorator_passing_arbitrary_arguments
def function_with_arguments(a, b, c):
    print a, b, c
 
function_with_arguments(1,2,3)
#outputs
#Do I have args?:
#(1, 2, 3)
#{}
#1 2 3
 
@a_decorator_passing_arbitrary_arguments
def function_with_named_arguments(a, b, c, platypus=&amp;quot;Why not ?&amp;quot;):
    print &amp;quot;Do %s, %s and %s like platypus? %s&amp;quot; %\
    (a, b, c, platypus)
 
function_with_named_arguments(&amp;quot;Bill&amp;quot;, &amp;quot;Linus&amp;quot;, &amp;quot;Steve&amp;quot;, platypus=&amp;quot;Indeed!&amp;quot;)
#outputs
#Do I have args ? :
#(&#39;Bill&#39;, &#39;Linus&#39;, &#39;Steve&#39;)
#{&#39;platypus&#39;: &#39;Indeed!&#39;}
#Do Bill, Linus and Steve like platypus? Indeed!
 
class Mary(object):
 
    def __init__(self):
        self.age = 31
 
    @a_decorator_passing_arbitrary_arguments
    def sayYourAge(self, lie=-3): # You can now add a default value
        print &amp;quot;I am %s, what did you think ?&amp;quot; % (self.age + lie)
 
m = Mary()
m.sayYourAge()
#outputs
# Do I have args?:
#(&amp;lt;__main__.Mary object at 0xb7d303ac&amp;gt;,)
#{}
#I am 28, what did you think?
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;8-给装饰器传参-passing-arguments-to-the-decorator&#34;&gt;8. 给装饰器传参（Passing arguments to the decorator）&lt;/h1&gt;

&lt;p&gt;太棒了，那么现在对于给装饰器本身传参数，你有什么看法呢？好吧，这样说有点绕，因为装饰器必须接受一个函数作为参数，所以就不能把被装饰的函数的参数，直接传给装饰器（you cannot pass the decorated function arguments directly to the decorator.）&lt;/p&gt;

&lt;p&gt;在直奔答案之前，我们先写一个小提示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Decorators are ORDINARY functions
def my_decorator(func):
    print &amp;quot;I am a ordinary function&amp;quot;
    def wrapper():
        print &amp;quot;I am function returned by the decorator&amp;quot;
        func()
    return wrapper
 
# Therefore, you can call it without any &amp;quot;@&amp;quot;
 
def lazy_function():
    print &amp;quot;zzzzzzzz&amp;quot;
 
decorated_function = my_decorator(lazy_function)
#outputs: I am a ordinary function
 
# It outputs &amp;quot;I am a ordinary function&amp;quot;, because that&#39;s just what you do:
# calling a function. Nothing magic.
 
@my_decorator
def lazy_function():
    print &amp;quot;zzzzzzzz&amp;quot;
 
#outputs: I am a ordinary function
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这完全一样，都是 &lt;code&gt;my_decorator&lt;/code&gt; 被调用。所以当你使用 &lt;code&gt;@my_decorator&lt;/code&gt; 时，你在告诉 python 去调用 “被变量 &lt;code&gt;my_decorator&lt;/code&gt; 标记的” 函数（the function &amp;lsquo;labeled by the variable &amp;ldquo;my_decorator&amp;rdquo;&amp;lsquo;）。这很重要，因为你给的这个标签能直接指向装饰器。。。或者其他！让我们开始变得邪恶！（Let&amp;rsquo;s start to be evil!）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def decorator_maker():
 
    print &amp;quot;I make decorators! I am executed only once: &amp;quot;+\
          &amp;quot;when you make me create a decorator.&amp;quot;
 
    def my_decorator(func):
 
        print &amp;quot;I am a decorator! I am executed only when you decorate a function.&amp;quot;
 
        def wrapped():
            print (&amp;quot;I am the wrapper around the decorated function. &amp;quot;
                  &amp;quot;I am called when you call the decorated function. &amp;quot;
                  &amp;quot;As the wrapper, I return the RESULT of the decorated function.&amp;quot;)
            return func()
 
        print &amp;quot;As the decorator, I return the wrapped function.&amp;quot;
 
        return wrapped
 
    print &amp;quot;As a decorator maker, I return a decorator&amp;quot;
    return my_decorator
 
# Let&#39;s create a decorator. It&#39;s just a new function after all.
new_decorator = decorator_maker()      
#outputs:
#I make decorators! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator
 
# Then we decorate the function
 
def decorated_function():
    print &amp;quot;I am the decorated function.&amp;quot;
 
decorated_function = new_decorator(decorated_function)
#outputs:
#I am a decorator! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function
 
# Let&#39;s call the function:
decorated_function()
#outputs:
#I am the wrapper around the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不要感到惊讶，让我们做一件完全一样的事情，只不过跳过了中间变量：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def decorated_function():
    print &amp;quot;I am the decorated function.&amp;quot;
decorated_function = decorator_maker()(decorated_function)
#outputs:
#I make decorators! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator
#I am a decorator! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function.
 
# Finally:
decorated_function()   
#outputs:
#I am the wrapper around the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再做一次，代码甚至更短：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@decorator_maker()
def decorated_function():
    print &amp;quot;I am the decorated function.&amp;quot;
#outputs:
#I make decorators! I am executed only once: when you make me create a decorator.
#As a decorator maker, I return a decorator
#I am a decorator! I am executed only when you decorate a function.
#As the decorator, I return the wrapped function.
 
#Eventually:
decorated_function()   
#outputs:
#I am the wrapper around the decorated function. I am called when you call the decorated function.
#As the wrapper, I return the RESULT of the decorated function.
#I am the decorated function.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;嘿，看到了吗？我们在用 &lt;code&gt;@&lt;/code&gt; 语法调用了函数 ：-）
那么回到带参数的装饰器。如果我们能够使用一个函数动态（on the fly）的生成装饰器，那么我们就能把参数传递给那个函数，对吗？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def decorator_maker_with_arguments(decorator_arg1, decorator_arg2):
 
    print &amp;quot;I make decorators! And I accept arguments:&amp;quot;, decorator_arg1, decorator_arg2
 
    def my_decorator(func):
        # 在这里能传参数是一个来自闭包的馈赠.
        # 如果你对闭包感到不舒服，你可以直接忽略（you can assume it&#39;s ok）,
        # 或者看看这里: http://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python
        print &amp;quot;I am the decorator. Somehow you passed me arguments:&amp;quot;, decorator_arg1, decorator_arg2
 
        # 不要把装饰器参数和函数参数搞混了！
        def wrapped(function_arg1, function_arg2) :
            print (&amp;quot;I am the wrapper around the decorated function.\n&amp;quot;
                  &amp;quot;I can access all the variables\n&amp;quot;
                  &amp;quot;\t- from the decorator: {0} {1}\n&amp;quot;
                  &amp;quot;\t- from the function call: {2} {3}\n&amp;quot;
                  &amp;quot;Then I can pass them to the decorated function&amp;quot;
                  .format(decorator_arg1, decorator_arg2,
                          function_arg1, function_arg2))
            return func(function_arg1, function_arg2)
 
        return wrapped
 
    return my_decorator
 
@decorator_maker_with_arguments(&amp;quot;Leonard&amp;quot;, &amp;quot;Sheldon&amp;quot;)
def decorated_function_with_arguments(function_arg1, function_arg2):
    print (&amp;quot;I am the decorated function and only knows about my arguments: {0}&amp;quot;
           &amp;quot; {1}&amp;quot;.format(function_arg1, function_arg2))
 
decorated_function_with_arguments(&amp;quot;Rajesh&amp;quot;, &amp;quot;Howard&amp;quot;)
#outputs:
#I make decorators! And I accept arguments: Leonard Sheldon
#I am the decorator. Somehow you passed me arguments: Leonard Sheldon
#I am the wrapper around the decorated function.
#I can access all the variables
#   - from the decorator: Leonard Sheldon
#   - from the function call: Rajesh Howard
#Then I can pass them to the decorated function
#I am the decorated function and only knows about my arguments: Rajesh Howard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就是了，带参数的装饰器。参数也可以设置为变量：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;c1 = &amp;quot;Penny&amp;quot;
c2 = &amp;quot;Leslie&amp;quot;
 
@decorator_maker_with_arguments(&amp;quot;Leonard&amp;quot;, c1)
def decorated_function_with_arguments(function_arg1, function_arg2):
    print (&amp;quot;I am the decorated function and only knows about my arguments:&amp;quot;
           &amp;quot; {0} {1}&amp;quot;.format(function_arg1, function_arg2))
 
decorated_function_with_arguments(c2, &amp;quot;Howard&amp;quot;)
#outputs:
#I make decorators! And I accept arguments: Leonard Penny
#I am the decorator. Somehow you passed me arguments: Leonard Penny
#I am the wrapper around the decorated function.
#I can access all the variables
#   - from the decorator: Leonard Penny
#   - from the function call: Leslie Howard
#Then I can pass them to the decorated function
#I am the decorated function and only knows about my arguments: Leslie Howard
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如你所见，你可以给装饰器传递参数，就好像其他任意一个使用了这种把戏的函数一样（you can pass arguments to the decorator like any function using this trick. ）。如果你愿意，甚至可以使用 &lt;code&gt;*args&lt;/code&gt;, &lt;code&gt;**kwargs&lt;/code&gt;。但是，记住，装置器只调用一次，仅当python导入这个脚本时。你不能在之后动态的设置参数（You can&amp;rsquo;t dynamically set the arguments afterwards.）。当你执行 &lt;code&gt;import x&lt;/code&gt; 时，这个函数已经被装饰了，因此你不能修改任何东西。&lt;/p&gt;

&lt;h1 id=&#34;9-实践-装饰器装饰一个装饰器-let-s-practice-a-decorator-to-decorate-a-decorator&#34;&gt;9. 实践：装饰器装饰一个装饰器（Let&amp;rsquo;s practice: a decorator to decorate a decorator）&lt;/h1&gt;

&lt;p&gt;OK，作为一个福利，我将展示一段能用来创建能接受通用的任意参数的装饰器的代码（I&amp;rsquo;ll give you a snippet to make any decorator accept generically any argument. ）。毕竟，为了能接受参数，我们用了另一个函数来创建我们的装饰器。我们包装了装饰器。在我们刚刚看到的东西里，还有用来包装函数的吗？是的，就是装饰器。让我们给装饰器写一个装饰器来玩玩：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def decorator_with_args(decorator_to_enhance):
    &amp;quot;&amp;quot;&amp;quot;
    This function is supposed to be used as a decorator.
    It must decorate an other function, that is intended to be used as a decorator.
    Take a cup of coffee.
    It will allow any decorator to accept an arbitrary number of arguments,
    saving you the headache to remember how to do that every time.
    &amp;quot;&amp;quot;&amp;quot;
 
    # We use the same trick we did to pass arguments
    def decorator_maker(*args, **kwargs):
 
        # We create on the fly a decorator that accepts only a function
        # but keeps the passed arguments from the maker.
        def decorator_wrapper(func):
 
            # We return the result of the original decorator, which, after all,
            # IS JUST AN ORDINARY FUNCTION (which returns a function).
            # Only pitfall: the decorator must have this specific signature or it won&#39;t work:
            return decorator_to_enhance(func, *args, **kwargs)
 
        return decorator_wrapper
 
    return decorator_maker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它可以像这样使用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# You create the function you will use as a decorator. And stick a decorator on it :-)
# Don&#39;t forget, the signature is &amp;quot;decorator(func, *args, **kwargs)&amp;quot;
@decorator_with_args
def decorated_decorator(func, *args, **kwargs):
    def wrapper(function_arg1, function_arg2):
        print &amp;quot;Decorated with&amp;quot;, args, kwargs
        return func(function_arg1, function_arg2)
    return wrapper
 
# Then you decorate the functions you wish with your brand new decorated decorator.
 
@decorated_decorator(42, 404, 1024)
def decorated_function(function_arg1, function_arg2):
    print &amp;quot;Hello&amp;quot;, function_arg1, function_arg2
 
decorated_function(&amp;quot;Universe and&amp;quot;, &amp;quot;everything&amp;quot;)
#outputs:
#Decorated with (42, 404, 1024) {}
#Hello Universe and everything
 
# Whoooot!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我知道，你上一次有这种感觉，是在听一个人说“在理解递归之前，你必须先理解递归”之后。但是现在，掌握之后，你不觉得很爽吗？&lt;/p&gt;

&lt;h1 id=&#34;10-装饰器最佳实践-best-practices-while-using-decorators&#34;&gt;10. 装饰器最佳实践（Best practices while using decorators）&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;装饰器是在 python 2.4 之后才有的，所以先确定你的代码运行时；&lt;/li&gt;
&lt;li&gt;记住这点：装饰器降低了函数调用效率；&lt;/li&gt;
&lt;li&gt;你不能“解装饰”一个函数（You can not un-decorate a function. ）。有一些能用来创建可以移除的装饰器的方法（There are hacks to create decorators that can be removed），但没人用它们。所以一个函数一旦被装饰了，就结束了（不能改变了）。&lt;strong&gt;For all the code.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;装饰器包装了函数，这使得会难以调试。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python 2.5 通过提供了一个 &lt;code&gt;functools&lt;/code&gt; 模块解决了最后一个问题。&lt;code&gt;functools.wraps&lt;/code&gt; 把任意被包装函数的函数名、模块名和 docstring 拷贝给了 &lt;code&gt;wrapper&lt;/code&gt;. 有趣的事是，&lt;code&gt;functools.wraps&lt;/code&gt; 也是一个装饰器：-）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# For debugging, the stacktrace prints you the function __name__
def foo():
    print &amp;quot;foo&amp;quot;
 
print foo.__name__
#outputs: foo
 
# With a decorator, it gets messy   
def bar(func):
    def wrapper():
        print &amp;quot;bar&amp;quot;
        return func()
    return wrapper
 
@bar
def foo():
    print &amp;quot;foo&amp;quot;
 
print foo.__name__
#outputs: wrapper
 
# &amp;quot;functools&amp;quot; can help for that
 
import functools
 
def bar(func):
    # We say that &amp;quot;wrapper&amp;quot;, is wrapping &amp;quot;func&amp;quot;
    # and the magic begins
    @functools.wraps(func)
    def wrapper():
        print &amp;quot;bar&amp;quot;
        return func()
    return wrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;11-装饰器如何才能有用-how-can-the-decorators-be-useful&#34;&gt;11. 装饰器如何才能有用（How can the decorators be useful?）&lt;/h1&gt;

&lt;p&gt;现在问题来了：我能用装饰器来干嘛？看起来很酷也很强大，但是来一个实际例子才更好。好吧，有1000中可能性（Well, there are 1000 possibilities.）。一个典型的用途是，用来扩展一个外部导入的函数（你不能修改）的行为，或者为了调试（你不想修改这个函数，因为只是暂时的）。你也可以用装饰器实现只用一段相同的代码来扩展成几个不同的函数，而且你不需要每次都重写这段代码。这样就是常说的 DRY。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def benchmark(func):
    &amp;quot;&amp;quot;&amp;quot;
    A decorator that prints the time a function takes
    to execute.
    &amp;quot;&amp;quot;&amp;quot;
    import time
    def wrapper(*args, **kwargs):
        t = time.clock()
        res = func(*args, **kwargs)
        print func.__name__, time.clock()-t
        return res
    return wrapper
 
 
def logging(func):
    &amp;quot;&amp;quot;&amp;quot;
    A decorator that logs the activity of the script.
    (it actually just prints it, but it could be logging!)
    &amp;quot;&amp;quot;&amp;quot;
    def wrapper(*args, **kwargs):
        res = func(*args, **kwargs)
        print func.__name__, args, kwargs
        return res
    return wrapper
 
 
def counter(func):
    &amp;quot;&amp;quot;&amp;quot;
    A decorator that counts and prints the number of times a function has been executed
    &amp;quot;&amp;quot;&amp;quot;
    def wrapper(*args, **kwargs):
        wrapper.count = wrapper.count + 1
        res = func(*args, **kwargs)
        print &amp;quot;{0} has been used: {1}x&amp;quot;.format(func.__name__, wrapper.count)
        return res
    wrapper.count = 0
    return wrapper
 
@counter
@benchmark
@logging
def reverse_string(string):
    return str(reversed(string))
 
print reverse_string(&amp;quot;Able was I ere I saw Elba&amp;quot;)
print reverse_string(&amp;quot;A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!&amp;quot;)
 
#outputs:
#reverse_string (&#39;Able was I ere I saw Elba&#39;,) {}
#wrapper 0.0
#wrapper has been used: 1x
#ablE was I ere I saw elbA
#reverse_string (&#39;A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!&#39;,) {}
#wrapper 0.0
#wrapper has been used: 2x
#!amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A

当然，装饰器的好处就是你可以几乎用来装饰所有东西，而且不要重写。也就是我说的 DRY：（Of course the good thing with decorators is that you can use them right away on almost anything without rewriting. DRY, I said:）

:::python
@counter
@benchmark
@logging
def get_random_futurama_quote():
    import httplib
    conn = httplib.HTTPConnection(&amp;quot;slashdot.org:80&amp;quot;)
    conn.request(&amp;quot;HEAD&amp;quot;, &amp;quot;/index.html&amp;quot;)
    for key, value in conn.getresponse().getheaders():
        if key.startswith(&amp;quot;x-b&amp;quot;) or key.startswith(&amp;quot;x-f&amp;quot;):
            return value
    return &amp;quot;No, I&#39;m ... doesn&#39;t!&amp;quot;
 
print get_random_furturama_quote()
print get_random_furturama_quote()
 
#outputs:
#get_random_futurama_quote () {}
#wrapper 0.02
#wrapper has been used: 1x
#The laws of science be a harsh mistress.
#get_random_futurama_quote () {}
#wrapper 0.01
#wrapper has been used: 2x
#Curse you, merciful Poseidon!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python 语言本身也提供了一些装饰器：&lt;code&gt;property&lt;/code&gt;、&lt;code&gt;staticmethod&lt;/code&gt; 等。Django 用装饰器来管理换成和视图权限。Twisted 用来伪装 内联异步函数调用（Twisted to fake inlining asynchronous functions calls. ）。这确实是一片广阔的天地。（This really is a large playground.）&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

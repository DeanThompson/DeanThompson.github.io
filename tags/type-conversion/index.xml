<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Type Conversion on 李林克斯</title>
    <link>http://liyangliang.me/tags/type-conversion/</link>
    <description>Recent content in Type Conversion on 李林克斯</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>yanglianglee@gmail.com (Yangliang Li)</managingEditor>
    <webMaster>yanglianglee@gmail.com (Yangliang Li)</webMaster>
    <lastBuildDate>Wed, 11 Jun 2014 15:50:41 +0800</lastBuildDate>
    
	<atom:link href="http://liyangliang.me/tags/type-conversion/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>不要用 fmt.Sprintf 做类型转换</title>
      <link>http://liyangliang.me/posts/2014/06/donnot-use-fmt-sprintf-for-type-conversion/</link>
      <pubDate>Wed, 11 Jun 2014 15:50:41 +0800</pubDate>
      <author>yanglianglee@gmail.com (Yangliang Li)</author>
      <guid>http://liyangliang.me/posts/2014/06/donnot-use-fmt-sprintf-for-type-conversion/</guid>
      <description>&lt;p&gt;严格的讲，应该是在把 &lt;code&gt;int&lt;/code&gt;，&lt;code&gt;float&lt;/code&gt;等类型转换为字符串时，不要用 &lt;code&gt;fmt.Sprintf&lt;/code&gt;，更好的做法是用标准库函数。&lt;code&gt;fmt.Sprintf&lt;/code&gt; 的用途是格式化字符串，接受的类型是 interface{}，内部使用了反射。所以，与相应的标准库函数相比，&lt;code&gt;fmt.Sprintf&lt;/code&gt; 需要更大的开销。大多数类型转换的函数都可以在 &lt;code&gt;strconv&lt;/code&gt; 包里找到。&lt;/p&gt;

&lt;h2 id=&#34;int-to-string&#34;&gt;int to string&lt;/h2&gt;

&lt;p&gt;整数类型转换为字符串，推荐使用 &lt;code&gt;strconv.FormatInt&lt;/code&gt;（&lt;code&gt;int64&lt;/code&gt;），对于 &lt;code&gt;int&lt;/code&gt; 类型，&lt;code&gt;strconv.Itoa&lt;/code&gt; 对前者做了一个封装。&lt;/p&gt;

&lt;p&gt;比较一下 &lt;code&gt;strconv.FormatInt&lt;/code&gt; 和 &lt;code&gt;fmt.Sprintf&lt;/code&gt; 的时间开销：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;strconv&amp;quot;
    &amp;quot;time&amp;quot;
)

const LOOP = 10000

var num int64 = 10000

func main() {
    startTime := time.Now()
    for i := 0; i &amp;lt; LOOP; i++ {
        fmt.Sprintf(&amp;quot;%d&amp;quot;, num)
    }
    fmt.Printf(&amp;quot;fmt.Sprintf taken: %v\n&amp;quot;, time.Since(startTime))

    startTime = time.Now()
    for i := 0; i &amp;lt; LOOP; i++ {
        strconv.FormatInt(num, 10)
    }
    fmt.Printf(&amp;quot;strconv.FormatInt taken: %v\n&amp;quot;, time.Since(startTime))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中某一次运行结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fmt.Sprintf taken: 2.995178ms
strconv.FormatInt taken: 1.057318ms
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stackoverflow on 李林克斯</title>
    <link>http://liyangliang.me/tags/stackoverflow/</link>
    <description>Recent content in Stackoverflow on 李林克斯</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>yanglianglee@gmail.com (Yangliang Li)</managingEditor>
    <webMaster>yanglianglee@gmail.com (Yangliang Li)</webMaster>
    <lastBuildDate>Wed, 13 Mar 2013 00:26:58 +0800</lastBuildDate>
    
	<atom:link href="http://liyangliang.me/tags/stackoverflow/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>【翻译】理解 Python 装饰器</title>
      <link>http://liyangliang.me/posts/2013/03/understand-python-decorators/</link>
      <pubDate>Wed, 13 Mar 2013 00:26:58 +0800</pubDate>
      <author>yanglianglee@gmail.com (Yangliang Li)</author>
      <guid>http://liyangliang.me/posts/2013/03/understand-python-decorators/</guid>
      <description>&lt;h2 id=&#34;note&#34;&gt;Note&lt;/h2&gt;

&lt;p&gt;前段时间在 stack overflow 上看到一个关于 python decorator（装饰器）的问题，有一个人很耐心的写了一篇很长的教程。我也很耐心的看完了，获益匪浅。现在尝试翻译过来，尽量追求准确和尊重原文。不明白的地方，或翻译不好的地方，请参照原文，地址：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/739654/understanding-python-decorators#answer-1594484&#34;&gt;Understanding Python decorators&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;1-python的函数是对象-python-s-functions-are-objects&#34;&gt;1. python的函数是对象（Python&amp;rsquo;s functions are objects）&lt;/h1&gt;

&lt;p&gt;要理解装饰器，就必须先知道，在python里，函数也是对象（functions are objects）。明白这一点非常重要，让我们通过一个例子来看看为什么。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def shout(word=&amp;quot;yes&amp;quot;):
    return word.capitalize()+&amp;quot;!&amp;quot;
 
print shout()
# outputs : &#39;Yes!&#39;
 
# 作为一个对象，你可以像其他对象一样把函数赋值给其他变量
 
scream = shout
 
# 注意我们没有用括号：我们不是在调用函数，
# 而是把函数&#39;shout&#39;的值绑定到&#39;scream&#39;这个变量上
# 这也意味着你可以通过&#39;scream&#39;这个变量来调用&#39;shout&#39;函数
 
print scream()
# outputs : &#39;Yes!&#39;
 
# 不仅如此，这也还意味着你可以把原来的名字&#39;shout&#39;删掉，
# 而这个函数仍然可以通过&#39;scream&#39;来访问
del shout
try:
    print shout()
except NameError, e:
    print e
    #outputs: &amp;quot;name &#39;shout&#39; is not defined&amp;quot;
 
print scream()
outputs: &#39;Yes!&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK，先记住这点，我们马上会用到。python 函数的另一个有趣的特性是，它们可以在另一个函数体内定义。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def talk():
 
    # 你可以在 &#39;talk&#39; 里动态的(on the fly)定义一个函数...
    def whisper(word=&amp;quot;yes&amp;quot;):
        return word.lower()+&amp;quot;...&amp;quot;
 
    # ... 然后马上调用它！
 
    print whisper()
 
# 每当调用&#39;talk&#39;，都会定义一次&#39;whisper&#39;，然后&#39;whisper&#39;在&#39;talk&#39;里被调用
talk()
# outputs:
# &amp;quot;yes...&amp;quot;
 
# 但是&amp;quot;whisper&amp;quot; 在 &amp;quot;talk&amp;quot;外并不存在:
 
try:
    print whisper()
except NameError, e:
    print e
    #outputs : &amp;quot;name &#39;whisper&#39; is not defined&amp;quot;*
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>